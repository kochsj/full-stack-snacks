{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport axios from 'axios';\nimport LoginForm from './components/LoginForm'; // import './App.css';\n\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\nimport SnackDetail from './components/snackDetail';\nimport SnackList from './components/snackList';\nimport SnackForm from './components/snackForm';\nconst url = 'http://167.172.203.221:8000/api/';\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accessToken: '',\n      refreshToken: '',\n      snacks: null // snacks: [\n      //   {id: 1234, name: \"abcd\", desc: \"yaya\"},\n      //   {id: 5678, name: \"efgh\", desc: \"nana\"},\n      // ]      \n\n    };\n    this.renderSnackDetail = this.renderSnackDetail.bind(this);\n    this.formHandler = this.formHandler.bind(this);\n    this.deleteHandler = this.deleteHandler.bind(this);\n    this.updateHandler = this.updateHandler.bind(this);\n    this.loginHandler = this.loginHandler.bind(this);\n  }\n\n  async loginHandler({\n    access,\n    refresh\n  }) {\n    this.setState({\n      accessToken: access,\n      refreshToken: refresh\n    });\n\n    try {\n      const headers = {\n        headers: {\n          Authorization: `Bearer ${this.state.accessToken}`\n        }\n      };\n      const response = await axios.get(url + 'v1/', headers);\n      console.log(response.data);\n      this.setState({\n        snacks: response.data\n      });\n    } catch (error) {\n      console.error('ruhroh');\n    }\n  }\n\n  renderSnackDetail(props) {\n    if (!this.state.accessToken) {\n      return __jsx(Redirect, {\n        to: \"/\"\n      });\n    }\n\n    const snackId = parseInt(props.match.params.id);\n    const snack = this.state.snacks && this.state.snacks.find(snack => snack.id === snackId);\n    console.log('trying to render {snack}: ', snack);\n\n    if (snack) {\n      return __jsx(SnackDetail, {\n        snack: snack,\n        doneHandler: this.updateHandler,\n        deleteHandler: this.deleteHandler\n      });\n    } else {\n      return __jsx(Redirect, {\n        to: \"/\"\n      });\n    }\n  }\n\n  async formHandler(snack) {\n    let newSnack = snack;\n    let newList = this.state.snacks;\n    newList.push(newSnack);\n    this.setState({\n      snacks: newList\n    });\n  }\n\n  async updateHandler(snack) {\n    console.log('input update: ', snack);\n    this.setState({\n      snacks: this.state.snacks.map(snk => {\n        if (snk.id === snack.id) {\n          return snack;\n        } else {\n          return snk;\n        }\n      })\n    });\n  }\n\n  async deleteHandler(event) {\n    let snackToDelete = event.target.value;\n    console.log('should be id: ', snackToDelete);\n    const lst = this.state.snacks.filter(snack => snack.id !== Number(snackToDelete));\n    this.setState({\n      snacks: lst\n    });\n  }\n\n  render() {\n    return __jsx(Router, null, __jsx(\"h1\", null, \"Hello World\"), __jsx(Switch, null, __jsx(Route, {\n      exact: true,\n      path: \"/\"\n    }, this.state.snacks ? __jsx(SnackList, {\n      snacks: this.state.snacks,\n      doneHandler: this.formHandler\n    }) : __jsx(LoginForm, {\n      onSuccess: this.loginHandler\n    })), __jsx(Route, {\n      path: \"/:id\",\n      render: this.renderSnackDetail\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}